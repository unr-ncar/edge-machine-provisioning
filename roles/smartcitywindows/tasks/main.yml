#- name: git clone smart city repo
#  win_git:
#    repo: "https://{{ githubuser | urlencode }}:{{ githubpassword | urlencode }}@github.com/ChaseCarthen/Smart-City.git"
#    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\Smart-City"
#    branch: nifi
#    update: no
#    recursive: yes
#    replace_dest: no
#    accept_hostkey: yes

- name: Create a data directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\data\active
    state: directory
- name: Create a data directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\data\pcap
    state: directory

- name: Create a elasticsearch directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\elasticsearch
    state: directory
- name: Coping filebeat.docker.yml
  win_copy:
    dest: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\elasticsearch\\filebeat.docker.yml
    src: filebeat.docker.yml

- name: Create a content directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\minifi\\content_repository
    state: directory
- name: Create a flowfile directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\minifi\\flowfile_repository
    state: directory
- name: Create a provenance directory if it does not exist
  win_file:
    path: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\minifi\\provenance_repository
    state: directory
- name: Coping filebeat.docker.yml
  win_copy:
    dest: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\minifi\\process.yml
    src: process.yml
- name: Create certs.d directory in docker
  win_file:
    path: C:\\ProgramData\\Docker\\certs.d
    state: directory
- name: creating certs.d in docker
  win_copy:
    dest: C:\\ProgramData\\Docker\\certs.d\\ncar-im-1.rc.unr.edu
    src: certs/
- name: creating certs.d in docker
  win_copy:
    dest: C:\\ProgramData\\Docker\\certs.d\\ncar-im-2.rc.unr.edu
    src: certs/
- name: creating certs.d in docker
  win_copy:
    dest: C:\\ProgramData\\Docker\\certs.d\\ncar-im-3.rc.unr.edu
    src: certs/

#- name: "Copy release folder to windows computer."
#  win_copy:
#    src: Release
#    dest: C:\\Users\{{ansible_ssh_user}}\\Documents\\infrastructure\\

- name: "Creating docker compose file"
  win_template:
    src: docker-compose-sensor.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\docker-compose.yml"
- name: "Creating docker compose powershell file"
  win_template:
    src: run-compose.ps1.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\run-compose.ps1"
- name: "Creating power shell script for network interface 1"
  win_template:
    src: networking.ps1.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\networking1.ps1"
  vars:
    access: one
- name: "Creating power shell script for network interface 2"
  win_template:
    src: networking.ps1.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\networking2.ps1"
  vars:
    access: two
- name: "Creating power shell script for lidar 1"
  win_template:
    src: mqtt.ps1.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\mqtt1.ps1"
  vars:
    access: one
- name: "Creating power shell script for lidar 2"
  win_template:
    src: mqtt.ps1.j2
    dest: "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\mqtt2.ps1"
  vars:
    access: two
# - name: Create task to run a PS script for docker compose on boot
#   win_scheduled_task:
#     name: docker infrastructure
#     description: Run a PowerShell script
#     actions:
#     - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#       arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\run-compose.ps1"
#     triggers:
#     - type: boot
#     username: edge
#     password: "{{windowpass}}"
#     logon_type: password
#     execution_time_limit: PT0S
#     start_when_available: yes
#     state: present
#- name: Create task to run a PS script as NETWORK service on boot
#  win_scheduled_task:
#    name: networking1 automated
#    description: Run a PowerShell script
#     actions:
#     - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#       arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\networking1.ps1"
#     triggers:
#     - type: boot
#     username: edge
#     password: "{{windowpass}}"
#     logon_type: password
#     execution_time_limit: PT0S
#     start_when_available: yes
#     state: present
# - name: Create task to run a PS script as NETWORK service on boot
#   win_scheduled_task:
#     name: networking2 automated
#     description: Run a PowerShell script
#     actions:
#     - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#       arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\networking2.ps1"
#     triggers:
#     - type: boot
#     username: edge
#     password: "{{windowpass}}"
#     logon_type: password
#     execution_time_limit: PT0S
#     start_when_available: yes
#     state: present
#- name: Create task to run a PS script as mqtt service on boot 1
#  win_scheduled_task:
#     name: mqtt1 automated
#     description: Run a PowerShell script
#     actions:
#     - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#       arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\mqtt1.ps1"
    #  - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
    #    arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\mqtt2.ps1"
#     triggers:
#- type: boot
#      username: edge
     #     password: "{{windowpass}}"
#     logon_type: password
#     execution_time_limit: PT0S
#     start_when_available: yes
#     state: present
#- name: Create task to run a PS script as mqtt service on boot 2
#  win_scheduled_task:
#    name: mqtt2 automated
#    description: Run a PowerShell script
#    actions:
#    - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
#      arguments: -ExecutionPolicy Unrestricted -NonInteractive -File "C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\mqtt2.ps1"
#    triggers:
#    - type: boot
#    username: edge
#    password: "{{windowpass}}"
#    logon_type: password
#    execution_time_limit: PT0S
#    start_when_available: yes
#    state: present

- name: add startDocker.ps1 to edge computer
  win_copy:
    dest: C:\\Users\\{{ansible_ssh_user}}\\Documents\\infrastructure\\startDocker.ps1
    src: startDocker.ps1

- name: Create task to run docker startup script
  win_scheduled_task:
     name: docker startup
     description: Starts docker on startup
     actions:
     - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
       arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\Users\{{ansible_ssh_user}}\Documents\infrastructure\startDocker.ps1
     triggers:
     - type: boot
     username: edge
     password: "{{windowpass}}"
     logon_type: password
     execution_time_limit: PT0S
     start_when_available: yes
     state: present

